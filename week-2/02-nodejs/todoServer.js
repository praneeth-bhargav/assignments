/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
const { readFile, writeFile } = require('fs');
  const fs=require('fs').promises;
  const app = express();
  app.use(express.json());
  async function getFromFile() {
    const data = await fs.readFile("temp.json", "utf-8");
    return JSON.parse(data);
  }
  app.get("/todos", async (req, res) => {
    const todos_obj = await getFromFile();
    // let x=;
    res.status(200).json(Object.values(todos_obj));
  });
  app.get("/todos/:id", async (req, res) => {
    const todos_obj = await getFromFile();
    let id = req.params.id;
    if (Object.keys(todos_obj).includes(id)) {
      res.status(200).json(todos_obj[id]);
    } else {
      res.status(404).send();
    }
  });
  app.post("/todos", async (req, res) => {
    let todos_obj = await getFromFile();
    const id = Math.floor(Math.random() * 10000) + 1;
    todos_obj[id] = req.body;
    await fs.writeFile("temp.json", JSON.stringify(todos_obj), "utf-8");
    res.status(201).json({id:`${id}`});
  });
  app.put("/todos/:id", async (req, res) => {
    let todos_obj = await getFromFile();
    const id = req.params.id;
    if (todos_obj[id]) {
      todos_obj[id].title = req.body.title;
      todos_obj[id].description = req.body.description;
      console.log(todos_obj);
      try{
        await fs.writeFile("temp.json", JSON.stringify(todos_obj), {
          encoding: "utf-8",
        });
  
      }catch(err){
        console.log(err);
      }
      res.status(200).json();
    } else {
      res.status(404).send();
    }
  });
  
  app.delete("/todos/:id",async(req,res)=>{
    const id = req.params.id;
    let todos_obj = await getFromFile();
    if (todos_obj[id]) {
      delete todos_obj[id];
      try{
        await fs.writeFile("temp.json", JSON.stringify(todos_obj), {
          encoding: "utf-8",
        });
  
      }catch(err){
        console.log(err);
      }
      res.status(200).json();
    } else {
      res.status(404).send();
    }
  })
  app.get('*', (req, res) => {
    res.send('This is the default handler for non-required URLs.');
  });
  module.exports = app;